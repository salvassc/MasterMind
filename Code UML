@startuml

class Mastermind{
  play()
}

class SecretPlayer{
  secretCombination
  proposedPlayer
  SecretPlayer(ProposedPlayer)
  prepared()
  answer()
  write()
}
class ProposedPlayer{
  proposedCombination
  attemps
  listProposedCombination
  getAttemps()
  setAttemps()
  writeAttemps()
  propose()
  getLastProposedCombination()
  writeProposedCombinations()
  isWinner()
  isLooser()
}

class Combination{
  colorOne
  colorTwo
  colorThree
  colorFour
  getColorOne();
  getColorTwo()
  getColorThree();
  getColorFour();
  setColorOne(Color);
  setColorTwo(Color);
  setColorThree(Color);
  setColorFour(Color);
  searchColor(nameColor);
}
enum Color

class SecretCombination{
  SecretCombination()
  calculateResult(ProposedCombination)
  generateSecretCombination()
  
}

class ProposedCombination{
  result
  read()
  containsColor(Color, position)
  containsPosition(Color)
  setResult()
  write()
  isWinner()
  assignProposedCombination()
  checkProposedCombination()
  checkCombinationSize()
  checkRepeatedColours()
  checkColour()
}

class Result{
  deads
  damageds
  Result(deads,damageds)
  getDeads()
  setDeads(deads)
  getDamaged()
  setDamaged(damaged)
  write(result)
  isWinner()
}

Mastermind *--> SecretPlayer
Mastermind *--> ProposedPlayer

SecretPlayer --> ProposedPlayer
ProposedPlayer o--> ProposedCombination
SecretPlayer o--> SecretCombination

SecretCombination ..> ProposedCombination
SecretCombination ..> Result

Combination *--> Color
Combination <|-- ProposedCombination
Combination <|-- SecretCombination

ProposedCombination o--> Result

@enduml
